{"version":3,"file":"modify.87d28da7.js","sources":["../../src/routes/admin/modify.jsx"],"sourcesContent":["import React, { useState, useEffect } from \"react\";\r\nimport { message, Form, Input, Button, Select, Card } from 'antd';\r\nimport { injectIntl } from \"react-intl\";\r\n\r\nimport api from '../../api/admin';\r\nimport roleApi from '../../api/role';\r\n\r\nconst Item = Form.Item;\r\n\r\nconst layout = {\r\n  labelCol: { span: 4 },\r\n  wrapperCol: { span: 12 },\r\n};\r\nconst tailLayout = {\r\n  wrapperCol: { span: 8, offset: 4 },\r\n};\r\n\r\nconst Modify = ({ location, history, intl }) => {\r\n  const { editData } = location.state || {};\r\n  const isEdit = editData !== undefined;\r\n  const [form] = Form.useForm();\r\n  const [roles, setRoles] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const initRoles = async () => {\r\n      let res = await roleApi.getOptions();\r\n      if (res.code) return message.error(res.msg);\r\n      setRoles(res.data);\r\n    };\r\n    initRoles();\r\n    if (isEdit) {\r\n      form.setFieldsValue(editData);\r\n    }\r\n    //eslint-disable-next-line\r\n  }, []);\r\n\r\n  const onFinish = async values => {\r\n    let res = isEdit ? await api.edit(editData._id, values) : await api.add(values);\r\n    if (res.code) return message.error(res.msg);\r\n    message.success(res.msg);\r\n    history.goBack();\r\n  };\r\n\r\n  return (\r\n    <Card className=\"gx-card\" title={intl.formatMessage({ id: 'admin.form' }, { control: isEdit ? \"Edit\" : \"Create\" })}>\r\n      <Form {...layout} form={form} name='admin' onFinish={onFinish} autoComplete=\"off\">\r\n        <Item label={intl.formatMessage({ id: 'admin.roleName' })} name='roleId' rules={[{ required: true }]}>\r\n          <Select placeholder={intl.formatMessage({ id: 'placeholder.selector' })} options={roles}>\r\n          </Select>\r\n        </Item>\r\n        <Item label={intl.formatMessage({ id: 'admin.account' })} name='account' rules={[{ required: true }]}>\r\n          <Input />\r\n        </Item>\r\n        {isEdit ? (<Item label={intl.formatMessage({ id: 'admin.password' })} name='password'>\r\n          <Input />\r\n        </Item>) : (\r\n          <>\r\n            <Item label={intl.formatMessage({ id: 'admin.password' })} name='password' rules={[{ required: true }]} hasFeedback>\r\n              <Input.Password />\r\n            </Item>\r\n            <Form.Item\r\n              name='confirm'\r\n              label={intl.formatMessage({ id: 'admin.confirmPassword' })}\r\n              dependencies={['password']}\r\n              hasFeedback\r\n              rules={[\r\n                {\r\n                  required: true,\r\n                },\r\n                ({ getFieldValue }) => ({\r\n                  validator(_, value) {\r\n                    if (!value || getFieldValue('password') === value) {\r\n                      return Promise.resolve();\r\n                    }\r\n                    return Promise.reject(new Error(intl.formatMessage({ id: 'admin.confirmError' })));\r\n                  },\r\n                }),\r\n              ]}\r\n            >\r\n              <Input.Password />\r\n            </Form.Item>\r\n          </>\r\n        )}\r\n\r\n        <Item label={intl.formatMessage({ id: 'admin.name' })} name='name' rules={[{ required: true }]}>\r\n          <Input />\r\n        </Item>\r\n        <Item label={intl.formatMessage({ id: 'admin.email' })} name='email'>\r\n          <Input />\r\n        </Item>\r\n        <Item label={intl.formatMessage({ id: 'admin.staffNo' })} name='staffNo'>\r\n          <Input />\r\n        </Item>\r\n\r\n        <Item {...tailLayout}>\r\n          <Button type=\"primary\" htmlType=\"submit\">\r\n            {intl.formatMessage({ id: 'buttons.submit' })}\r\n          </Button>\r\n        </Item>\r\n      </Form>\r\n    </Card>)\r\n}\r\n\r\nexport default injectIntl(Modify);"],"names":["Item","Form","layout","labelCol","span","wrapperCol","tailLayout","offset","Modify","location","history","intl","editData","state","isEdit","undefined","form","useForm","roles","setRoles","useState","res","roleApi","getOptions","code","message","error","msg","data","setFieldsValue","onFinish","values","api","edit","_id","add","success","goBack","formatMessage","id","control","required","getFieldValue","validator","_","value","Promise","resolve","reject","Error","injectIntl"],"mappings":"2pBAOA,KAAMA,GAAOC,EAAKD,KAEZE,EAAS,CACbC,SAAU,CAAEC,KAAM,GAClBC,WAAY,CAAED,KAAM,KAEhBE,EAAa,CACjBD,WAAY,CAAED,KAAM,EAAGG,OAAQ,IAG3BC,EAAS,CAAC,CAAEC,WAAUC,UAASC,UAAW,MACxC,CAAEC,YAAaH,EAASI,OAAS,GACjCC,EAASF,IAAaG,OACtB,CAACC,GAAQf,EAAKgB,UACd,CAACC,EAAOC,GAAYC,mBAAS,wBAEzB,IAAM,CACI,UAAY,IACxBC,GAAM,KAAMC,GAAQC,gBACpBF,EAAIG,WAAaC,GAAQC,MAAML,EAAIM,OAC9BN,EAAIO,UAGXd,KACGe,eAAejB,IAGrB,SAEGkB,GAAW,KAAMC,IAAU,IAC3BV,GAAMP,EAAS,KAAMkB,GAAIC,KAAKrB,EAASsB,IAAKH,GAAU,KAAMC,GAAIG,IAAIJ,MACpEV,EAAIG,WAAaC,GAAQC,MAAML,EAAIM,OAC/BS,QAAQf,EAAIM,OACZU,iCAIP,EAAD,CAAM,UAAU,UAAU,MAAO1B,EAAK2B,cAAc,CAAEC,GAAI,cAAgB,CAAEC,QAAS1B,EAAS,OAAS,4BACpG,EAAD,OAAUZ,GAAV,CAAkB,OAAY,KAAK,QAAQ,WAAoB,aAAa,wBACzE,EAAD,CAAM,MAAOS,EAAK2B,cAAc,CAAEC,GAAI,mBAAqB,KAAK,SAAS,MAAO,CAAC,CAAEE,SAAU,sBAC1F,EAAD,CAAQ,YAAa9B,EAAK2B,cAAc,CAAEC,GAAI,yBAA2B,QAASrB,qBAGnF,EAAD,CAAM,MAAOP,EAAK2B,cAAc,CAAEC,GAAI,kBAAoB,KAAK,UAAU,MAAO,CAAC,CAAEE,SAAU,sBAC1F,EAAD,OAED3B,kBAAW,EAAD,CAAM,MAAOH,EAAK2B,cAAc,CAAEC,GAAI,mBAAqB,KAAK,4BACxE,EAAD,uDAGG,EAAD,CAAM,MAAO5B,EAAK2B,cAAc,CAAEC,GAAI,mBAAqB,KAAK,WAAW,MAAO,CAAC,CAAEE,SAAU,KAAS,YAAxG,oBACG,EAAM,SAAP,uBAED,EAAK,KAAN,CACE,KAAK,UACL,MAAO9B,EAAK2B,cAAc,CAAEC,GAAI,0BAChC,aAAc,CAAC,YACf,YAJF,GAKE,MAAO,CACL,CACEE,SAAU,IAEZ,CAAC,CAAEC,qBACDC,UAAUC,EAAGC,EAAO,OACd,CAACA,GAASH,EAAc,cAAgBG,EACnCC,QAAQC,UAEVD,QAAQE,OAAO,GAAIC,OAAMtC,EAAK2B,cAAc,CAAEC,GAAI,8CAK9D,EAAM,SAAP,wBAKL,EAAD,CAAM,MAAO5B,EAAK2B,cAAc,CAAEC,GAAI,eAAiB,KAAK,OAAO,MAAO,CAAC,CAAEE,SAAU,sBACpF,EAAD,uBAED,EAAD,CAAM,MAAO9B,EAAK2B,cAAc,CAAEC,GAAI,gBAAkB,KAAK,yBAC1D,EAAD,uBAED,EAAD,CAAM,MAAO5B,EAAK2B,cAAc,CAAEC,GAAI,kBAAoB,KAAK,2BAC5D,EAAD,uBAGD,EAAD,KAAUjC,mBACP,EAAD,CAAQ,KAAK,UAAU,SAAS,UAC7BK,EAAK2B,cAAc,CAAEC,GAAI,wBAOtC,MAAeW,EAAW1C"}